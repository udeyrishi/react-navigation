{"version":3,"sources":["NavigationActions.tsx"],"names":["navigate","routeName","params","key","action","trigger","undefined","Error","CommonActions","name","back","options","state","goBack","source","target","setParams"],"mappings":";;;;;;;;;AAEA;;AAEO,SAASA,QAAT,CAAkB;AACvBC,EAAAA,SADuB;AAEvBC,EAAAA,MAFuB;AAGvBC,EAAAA,GAHuB;AAIvBC,EAAAA,MAJuB;AAKvBC,EAAAA;AALuB,CAAlB,EAYkB;AACvB,MAAID,MAAM,KAAKE,SAAf,EAA0B;AACxB,UAAM,IAAIC,KAAJ,CACJ,yFADI,CAAN;AAGD;;AAED,SAAOC,sBAAcR,QAAd,CAAuB;AAC5BS,IAAAA,IAAI,EAAER,SADsB;AAE5BE,IAAAA,GAAG,EAAEA,GAFuB;AAG5BD,IAAAA,MAAM,EAAEA,MAHoB;AAI5BG,IAAAA;AAJ4B,GAAvB,CAAP;AAMD;;AAEM,SAASK,IAAT,CAAcC,OAAd,EAAiD;AACtD,SAAO,CAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAER,GAAT,KAAgB,IAAhB,GACFS,KAAD,KAA6B,EAC3B,GAAGJ,sBAAcK,MAAd,EADwB;AAE3BC,IAAAA,MAAM,EAAEH,OAAO,CAACR,GAFW;AAG3BY,IAAAA,MAAM,EAAEH,KAAK,CAACT;AAHa,GAA7B,CADG,GAMHK,sBAAcK,MAAd,EANJ;AAOD;;AAEM,SAASG,SAAT,CAAmB;AACxBd,EAAAA,MADwB;AAExBC,EAAAA;AAFwB,CAAnB,EAMkB;AACvB,SAAO,EACL,GAAGK,sBAAcQ,SAAd,CAAwBd,MAAxB,CADE;AAEL,QAAIC,GAAG,KAAKG,SAAR,GAAoB;AAAEQ,MAAAA,MAAM,EAAEX;AAAV,KAApB,GAAsC,IAA1C;AAFK,GAAP;AAID","sourcesContent":["import type * as React from 'react';\nimport type { GestureResponderEvent } from 'react-native';\nimport { CommonActions, NavigationState } from '@react-navigation/native';\n\nexport function navigate({\n  routeName,\n  params,\n  key,\n  action,\n  trigger,\n}: {\n  routeName: string;\n  params?: object;\n  key?: string;\n  action?: never;\n  trigger?: React.MouseEvent<HTMLElement, MouseEvent> | GestureResponderEvent;\n}): CommonActions.Action {\n  if (action !== undefined) {\n    throw new Error(\n      'Sub-actions are not supported for `navigate`. Remove the `action` key from the options.'\n    );\n  }\n\n  return CommonActions.navigate({\n    name: routeName,\n    key: key,\n    params: params,\n    trigger,\n  });\n}\n\nexport function back(options?: { key?: null | string }) {\n  return options?.key != null\n    ? (state: NavigationState) => ({\n        ...CommonActions.goBack(),\n        source: options.key,\n        target: state.key,\n      })\n    : CommonActions.goBack();\n}\n\nexport function setParams({\n  params,\n  key,\n}: {\n  params: object;\n  key?: string;\n}): CommonActions.Action {\n  return {\n    ...CommonActions.setParams(params),\n    ...(key !== undefined ? { source: key } : null),\n  };\n}\n"]}